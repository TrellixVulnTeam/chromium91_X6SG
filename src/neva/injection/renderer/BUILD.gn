# Copyright 2016-2019 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import("//neva/neva.gni")
import("//tools/grit/repack.gni")

source_set("renderer") {
  deps = [
    "//base",
    "//gin",
    "//neva/app_runtime/public/mojom",
    "//neva/injection/public/common:common_sources",
    "//neva/pal_service",
    "//neva/pal_service/public/mojom",
    "//third_party/blink/public:blink",
  ]

  public_deps = [ "//v8" ]

  sources = [
    "gin/function_template_neva.h",
    "file_name_validate.cc",
    "file_name_validate.h",
    "injection_browser_control_base.cc",
    "injection_browser_control_base.h",
    "injection_data_manager.cc",
    "injection_data_manager.h",
  ]

  if (enable_browser_control_webapi) {
    sources += [
      "browser_control/browser_control_injection.cc",
      "browser_control/browser_control_injection.h",
      "browser_control/popupblocker_injection.cc",
      "browser_control/popupblocker_injection.h",
      "browser_control/sitefilter_injection.cc",
      "browser_control/sitefilter_injection.h",
    ]
  }

  if (enable_sample_webapi) {
    sources += [
      "sample/sample_injection.cc",
      "sample/sample_injection.h",
      "sample/sample_js.inc",
    ]
  }

  if (is_webos) {
    libs = ["luna-service2"]
    configs += ["//build/config/linux:glib"]

    sources += [
      "webosservicebridge/webosservicebridge_injection.cc",
      "webosservicebridge/webosservicebridge_injection.h",
      "webosservicebridge/webosservicebridge_properties.cc",
      "webosservicebridge/webosservicebridge_properties.h",
      "webossystem/cursor_injection.cc",
      "webossystem/cursor_injection.h",
      "webossystem/webossystem_datamanager.cc",
      "webossystem/webossystem_datamanager.h",
      "webossystem/webossystem_injection.cc",
      "webossystem/webossystem_injection.h",
      "webossystem/window_injection.cc",
      "webossystem/window_injection.h",
    ]

    if (enable_memorymanager_webapi) {
      sources += [
        "memorymanager/memorymanager_injection.cc",
        "memorymanager/memorymanager_injection.h",
      ]
    }

    if (use_gav) {
      sources += [
        "webosgavplugin/videowindow_impl.cc",
        "webosgavplugin/videowindow_impl.h",
        "webosgavplugin/webosgavplugin_datamanager.cc",
        "webosgavplugin/webosgavplugin_datamanager.h",
        "webosgavplugin/webosgavplugin_injection.cc",
        "webosgavplugin/webosgavplugin_injection.h",
      ]

      deps += [ "//content/public/common:frame_video_window_factory_mojom" ]
    }

    if (use_lttng) {
      deps += [
        "//base/trace_event/neva/lttng:webossystem_lttng_provider",
      ]
    }
  }

  # FIXME(neva): Temporary workaround to fix build issues on Chromium v.84
  # with Neva Media enabled.
  # Need to revise dependency on //content from //neva/injection.
  if (use_neva_media) {
    deps += [ "//ui/platform_window:mojom" ]
  }
}

grit("injection_resources_grit") {
  visibility = [ ":*" ]
  source = "//neva/injection/renderer/resources/injection_resources.grd"
  outputs = [
    "grit/injection_resources.h",
    "injection_resources.pak",
  ]
}

copy("copy_injection_resources") {
  sources = [
    "$target_gen_dir/injection_resources.pak",
    "$target_gen_dir/injection_resources.pak.info",
  ]
  outputs = [
    "$root_gen_dir/injection/renderer/resources/{{source_file_part}}",
  ]

  public_deps = [
    ":injection_resources_grit",
  ]
}

group("resources") {
  public_deps = [
    ":copy_injection_resources",
  ]
}
